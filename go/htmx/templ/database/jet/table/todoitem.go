//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ToDoItem = newToDoItemTable("", "ToDoItem", "")

type toDoItemTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnString
	Name        sqlite.ColumnString
	Description sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ToDoItemTable struct {
	toDoItemTable

	EXCLUDED toDoItemTable
}

// AS creates new ToDoItemTable with assigned alias
func (a ToDoItemTable) AS(alias string) *ToDoItemTable {
	return newToDoItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ToDoItemTable with assigned schema name
func (a ToDoItemTable) FromSchema(schemaName string) *ToDoItemTable {
	return newToDoItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ToDoItemTable with assigned table prefix
func (a ToDoItemTable) WithPrefix(prefix string) *ToDoItemTable {
	return newToDoItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ToDoItemTable with assigned table suffix
func (a ToDoItemTable) WithSuffix(suffix string) *ToDoItemTable {
	return newToDoItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newToDoItemTable(schemaName, tableName, alias string) *ToDoItemTable {
	return &ToDoItemTable{
		toDoItemTable: newToDoItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newToDoItemTableImpl("", "excluded", ""),
	}
}

func newToDoItemTableImpl(schemaName, tableName, alias string) toDoItemTable {
	var (
		IDColumn          = sqlite.StringColumn("ID")
		NameColumn        = sqlite.StringColumn("Name")
		DescriptionColumn = sqlite.StringColumn("Description")
		allColumns        = sqlite.ColumnList{IDColumn, NameColumn, DescriptionColumn}
		mutableColumns    = sqlite.ColumnList{NameColumn, DescriptionColumn}
	)

	return toDoItemTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

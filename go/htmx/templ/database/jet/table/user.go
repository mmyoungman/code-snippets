//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var User = newUserTable("", "User", "")

type userTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnString
	Username   sqlite.ColumnString
	Email      sqlite.ColumnString
	FirstName  sqlite.ColumnString
	LastName   sqlite.ColumnString
	RawIDToken sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn         = sqlite.StringColumn("ID")
		UsernameColumn   = sqlite.StringColumn("Username")
		EmailColumn      = sqlite.StringColumn("Email")
		FirstNameColumn  = sqlite.StringColumn("FirstName")
		LastNameColumn   = sqlite.StringColumn("LastName")
		RawIDTokenColumn = sqlite.StringColumn("RawIDToken")
		allColumns       = sqlite.ColumnList{IDColumn, UsernameColumn, EmailColumn, FirstNameColumn, LastNameColumn, RawIDTokenColumn}
		mutableColumns   = sqlite.ColumnList{UsernameColumn, EmailColumn, FirstNameColumn, LastNameColumn, RawIDTokenColumn}
	)

	return userTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Username:   UsernameColumn,
		Email:      EmailColumn,
		FirstName:  FirstNameColumn,
		LastName:   LastNameColumn,
		RawIDToken: RawIDTokenColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
